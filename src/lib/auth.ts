import CredentialsProvider from "next-auth/providers/credentials";nimport { getUserByEmail } from "./services/user";nimport bcrypt from "bcryptjs";nimport { NextAuthOptions } from "next-auth";nnexport const authOptions: NextAuthOptions = {n    providers: [n        CredentialsProvider({n            name: 'Credentials',n            credentials: {n                email: { label: "Email", type: "email", placeholder: "user@example.com" },n                password: { label: "Password", type: "password" }n            },n            async authorize(credentials) {n                if (!credentials?.email || !credentials?.password) {n                    return null;n                }nn                try {n                    // Get user from databasen                    const user = await getUserByEmail(credentials.email);n                    n                    if (!user) {n                        return null;n                    }nn                    // Verify passwordn                    const isValidPassword = await bcrypt.compare(credentials.password, user.password);n                    n                    if (!isValidPassword) {n                        return null;n                    }nn                    // Return user object for NextAuthn                    return {n                        id: user.id.toString(),n                        email: user.email,n                    };n                } catch (error) {n                    console.error('Authentication error:', error);n                    return null;n                }n            }n        })n    ],n    callbacks: {n        async jwt({ token, user }) {n            if (user) {n                token.id = user.id;n            }n            return token;n        },n        async session({ session, token }) {n            if (token && session.user) {n                (session.user as { id?: string }).id = token.id as string;n            }n            return session;n        },n    },n    session: {n        strategy: "jwt",n    },n};