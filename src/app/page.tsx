'use client';nnimport { useState, useEffect } from 'react';nimport { signIn, useSession } from 'next-auth/react';nimport { useRouter } from 'next/navigation';nnexport default function Home() {n  const [isLogin, setIsLogin] = useState(true);n  const [email, setEmail] = useState('');n  const [password, setPassword] = useState('');n  const [confirmPassword, setConfirmPassword] = useState('');n  const [error, setError] = useState('');n  const [loading, setLoading] = useState(false);n  const { data: session, status } = useSession();n  const router = useRouter();nn  // Redirect authenticated users to game pagen  useEffect(() => {n    if (status === 'loading') return; // Still loading sessionn    n    if (session) {n      router.push('/game');n    }n  }, [session, status, router]);nn  // Show loading while checking sessionn  if (status === 'loading') {n    return (n      <div className="min-h-screen flex items-center justify-center bg-gray-50">n        <div className="text-center">n          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>n          <p className="mt-4 text-gray-600">Loading...</p>n        </div>n      </div>n    );n  }nn  // Show nothing while redirectingn  if (session) {n    return null;n  }nn  const handleSubmit = async (e: React.FormEvent) => {n    e.preventDefault();n    setError('');n    setLoading(true);nn    if (!isLogin) {n      // Registration logicn      if (password !== confirmPassword) {n        setError('Passwords do not match');n        setLoading(false);n        return;n      }nn      if (password.length < 6) {n        setError('Password must be at least 6 characters long');n        setLoading(false);n        return;n      }nn      try {n        const response = await fetch('/api/auth/register', {n          method: 'POST',n          headers: {n            'Content-Type': 'application/json',n          },n          body: JSON.stringify({ email, password }),n        });nn        const data = await response.json();nn        if (!response.ok) {n          throw new Error(data.error || 'Registration failed');n        }nn        // Registration successful, switch to loginn        setIsLogin(true);n        setPassword('');n        setConfirmPassword('');n        setError('');n        alert('Registration successful! Please sign in.');n      } catch (error: unknown) {n        setError(error instanceof Error ? error.message : 'Registration failed');n      } finally {n        setLoading(false);n      }n    } else {n      // Login logicn      try {n        const result = await signIn('credentials', {n          email,n          password,n          redirect: false,n        });nn        if (result?.error) {n          setError('Invalid email or password');n        } else {n          router.push('/game');n        }n      } catch (error: unknown) {n        setError(error instanceof Error ? error.message : 'An error occurred during sign in');n      } finally {n        setLoading(false);n      }n    }n  };nn  return (n    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">n      <div className="max-w-md w-full space-y-8">n        <div>n          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">n            {isLogin ? 'Sign in to your account' : 'Create your account'}n          </h2>n        </div>n        n        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>n          <div className="rounded-md shadow-sm -space-y-px">n            <div>n              <label htmlFor="email" className="sr-only">n                Email addressn              </label>n              <inputn                id="email"n                name="email"n                type="email"n                autoComplete="email"n                requiredn                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"n                placeholder="Email address"n                value={email}n                onChange={(e) => setEmail(e.target.value)}n              />n            </div>n            <div>n              <label htmlFor="password" className="sr-only">n                Passwordn              </label>n              <inputn                id="password"n                name="password"n                type="password"n                autoComplete={isLogin ? "current-password" : "new-password"}n                requiredn                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"n                placeholder="Password"n                value={password}n                onChange={(e) => setPassword(e.target.value)}n              />n            </div>n            {!isLogin && (n              <div>n                <label htmlFor="confirmPassword" className="sr-only">n                  Confirm Passwordn                </label>n                <inputn                  id="confirmPassword"n                  name="confirmPassword"n                  type="password"n                  autoComplete="new-password"n                  requiredn                  className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"n                  placeholder="Confirm Password"n                  value={confirmPassword}n                  onChange={(e) => setConfirmPassword(e.target.value)}n                />n              </div>n            )}n            {isLogin && (n              <div className="rounded-b-md">n                <div className="h-full w-full px-3 py-2 border border-gray-300 border-t-0"></div>n              </div>n            )}n          </div>nn          {error && (n            <div className="text-red-600 text-sm text-center">{error}</div>n          )}nn          <div>n            <buttonn              type="submit"n              disabled={loading}n              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"n            >n              {loading n                ? (isLogin ? 'Signing in...' : 'Creating account...') n                : (isLogin ? 'Sign in' : 'Create account')n              }n            </button>n          </div>nn          <div className="text-center">n            <buttonn              type="button"n              onClick={() => {n                setIsLogin(!isLogin);n                setError('');n                setPassword('');n                setConfirmPassword('');n              }}n              className="font-medium text-indigo-600 hover:text-indigo-500"n            >n              {isLogin n                ? "Don't have an account? Sign up" n                : "Already have an account? Sign in"n              }n            </button>n          </div>n        </form>n      </div>n    </div>n  );n}